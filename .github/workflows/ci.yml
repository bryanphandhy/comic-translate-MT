name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly dependency vulnerability scan
    - cron: '0 2 * * 1'
  workflow_dispatch:

env:
  PYTHON_DEFAULT_VERSION: '3.11'
  CACHE_VERSION: v1

jobs:
  # Job 1: Code Quality and Static Analysis
  code-quality:
    name: Code Quality & Static Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy bandit safety pre-commit
        pip install -e .[dev]
    
    - name: Run ruff linting
      run: |
        ruff check . --output-format=github
        ruff format --check .
    
    - name: Run mypy type checking
      run: |
        mypy --config-file pyproject.toml .
      continue-on-error: true
    
    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json
        bandit -r . -f txt
      continue-on-error: true
    
    - name: Run safety vulnerability scan
      run: |
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  # Job 2: Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
    
    - name: Install pip-audit
      run: pip install pip-audit
    
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=audit-report.json
        pip-audit --format=cyclonedx-json --output=sbom.json
    
    - name: Upload audit reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-audit
        path: |
          audit-report.json
          sbom.json

  # Job 3: Test Matrix - Core Dependencies Only
  test-core:
    name: Test Core (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        exclude:
          # Exclude some combinations to reduce CI load
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.9'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
        # Virtual display for GUI testing
        sudo apt-get install -y xvfb
    
    - name: Install core dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run core tests
      run: |
        pytest tests/unit/ -v --tb=short --cov=comic_translate --cov-report=xml --cov-report=term-missing
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: ':99.0'
    
    - name: Start Xvfb (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == env.PYTHON_DEFAULT_VERSION && matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage.xml
        flags: core
        name: core-coverage

  # Job 4: Test Matrix - GPU Dependencies
  test-gpu:
    name: Test GPU (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 xvfb
    
    - name: Install GPU dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[gpu,dev]
    
    - name: Run GPU tests (CPU fallback)
      run: |
        pytest tests/unit/test_detection/ tests/unit/test_ocr/ -v --tb=short -m "not slow"
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: ':99.0'
        CUDA_VISIBLE_DEVICES: ''  # Force CPU mode

  # Job 5: Test Matrix - LLM Translation
  test-llm:
    name: Test LLM Translation (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 xvfb
    
    - name: Install LLM dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[llm-translation,dev]
    
    - name: Run LLM translation tests
      run: |
        pytest tests/unit/test_translation/ -v --tb=short -m "not slow"
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: ':99.0'

  # Job 6: Integration Tests
  integration-tests:
    name: Integration Tests (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    needs: [test-core]
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 xvfb
    
    - name: Install all dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[all,dev]
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short --cov=comic_translate --cov-report=xml
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: ':99.0'
    
    - name: Upload integration coverage
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest'
      with:
        file: ./coverage.xml
        flags: integration
        name: integration-coverage

  # Job 7: Performance and Memory Tests
  performance-tests:
    name: Performance & Memory Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [test-core]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 xvfb valgrind
    
    - name: Install dependencies with performance tools
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
        pip install memory-profiler pytest-benchmark psutil
    
    - name: Run performance tests
      run: |
        pytest tests/performance/ -v --tb=short --benchmark-only --benchmark-json=benchmark.json
      env:
        QT_QPA_PLATFORM: offscreen
        DISPLAY: ':99.0'
    
    - name: Run memory leak tests
      run: |
        pytest tests/unit/test_cache.py -v --tb=short -m "memory"
      env:
        QT_QPA_PLATFORM: offscreen
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: benchmark.json

  # Job 8: Documentation Build
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Build documentation
      run: |
        cd docs
        make html
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  # Job 9: Build and Test Package
  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, test-core]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine check-manifest
    
    - name: Check manifest
      run: check-manifest
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: |
        twine check dist/*
        pip install dist/*.whl
        python -c "import comic_translate; print('Package installed successfully')"
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-artifacts
        path: dist/

  # Job 10: Release Automation
  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [code-quality, test-core, integration-tests, build-package]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog (simplified version)
        echo "## Changes in v$VERSION" > RELEASE_NOTES.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> RELEASE_NOTES.md
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.changelog.outputs.version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
    
    - name: Publish to PyPI
      if: success()
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  # Job 11: Cleanup and Notifications
  cleanup:
    name: Cleanup & Notifications
    runs-on: ubuntu-latest
    if: always()
    needs: [code-quality, test-core, integration-tests, performance-tests, docs, build-package]
    
    steps:
    - name: Collect workflow status
      run: |
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Core Tests: ${{ needs.test-core.result }}"
        echo "Integration Tests: ${{ needs.integration-tests.result }}"
        echo "Performance Tests: ${{ needs.performance-tests.result }}"
        echo "Documentation: ${{ needs.docs.result }}"
        echo "Package Build: ${{ needs.build-package.result }}"
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "CI/CD pipeline failed. Check the logs for details."
        # Add notification logic here (Slack, Discord, email, etc.)

# Workflow-level configuration
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Security settings
permissions:
  contents: read
  security-events: write
  pages: write
  id-token: write